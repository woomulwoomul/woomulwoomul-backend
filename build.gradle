import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'org.jetbrains.kotlin.jvm' version '1.9.24'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.24'
	id 'org.jetbrains.kotlin.kapt' version '1.9.21'
}

group = 'com.woomulwoomul'
version = '0.0.1-SNAPSHOT'

bootJar {
	archiveFileName = 'app.jar'
	dependsOn asciidoctor
	from("${asciidoctor.outputDir}") {
		into 'static/docs'
	}
}

configurations {
	asciidoctorExt
}

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
	set('queryDslVersion', '5.0.0')
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.redisson:redisson-spring-boot-starter:3.17.7'
	implementation 'it.ozimov:embedded-redis:0.7.2'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'io.github.nefilim.kjwt:kjwt-core:0.9.0'
	implementation 'io.sentry:sentry-spring-boot-starter:7.4.0'
	implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.1'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	kapt("com.querydsl:querydsl-apt:5.0.0:jakarta")
	kapt("jakarta.annotation:jakarta.annotation-api")
	kapt("jakarta.persistence:jakarta.persistence-api")

	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2:'

	asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

tasks.withType(KotlinCompile) {
	kotlinOptions {
		freeCompilerArgs += '-Xjsr305=strict'
		jvmTarget = '21'
	}
}

tasks.named('test') {
	outputs.dir snippetsDir
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	configurations 'asciidoctorExt'
	sources {
		include("**/index.adoc")
	}
	baseDirFollowsSourceFile()
	dependsOn test
}

jacoco {
	toolVersion = '0.8.12'
}

tasks.jacocoTestReport {
	reports {
		html.required = true
		csv.required = true
		xml.required = true
	}

	def qDomains = []
	for (qPattern in "**/QA".."**/QZ")
		qDomains.add(qPattern + "*")

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(
					dir: it,
					excludes: [] + qDomains
			)
		}))
	}

	finalizedBy 'jacocoTestCoverageVerification'
}

tasks.jacocoTestCoverageVerification {
	def qDomains = []
	for (qPattern in "*.QA".."*.QZ")
		qDomains.add(qPattern + "*")

	violationRules {

		rule {
			enabled = true
			element = 'BUNDLE'

			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.01
			}
			excludes = [] + qDomains
		}
	}
}