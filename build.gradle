import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'org.jetbrains.kotlin.jvm' version '1.9.24'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
	id 'org.jetbrains.kotlin.plugin.jpa' version '1.9.24'
	id 'org.jetbrains.kotlin.kapt' version '1.9.21'
}

java.sourceCompatibility = JavaVersion.VERSION_21
bootJar.enabled = false

allprojects {
	group = 'com.woomulwoomul'
	version = '0.0.1-SNAPSHOT'
	repositories {
		mavenCentral()
	}
}


subprojects {
	apply {
		plugin('jacoco')
		plugin('org.springframework.boot')
		plugin('io.spring.dependency-management')
		plugin('org.jetbrains.kotlin.jvm')
		plugin('org.jetbrains.kotlin.plugin.spring')
		plugin('org.jetbrains.kotlin.plugin.jpa')
		plugin('org.jetbrains.kotlin.kapt')
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-web'
		implementation 'org.springframework.boot:spring-boot-starter-validation'
		implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-security'
		implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
		implementation 'org.jetbrains.kotlin:kotlin-reflect'
		implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
		implementation 'io.github.nefilim.kjwt:kjwt-core:0.9.0'
		implementation 'io.sentry:sentry-spring-boot-starter:7.4.0'
		implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'

		testImplementation 'org.springframework.boot:spring-boot-starter-test'
		testImplementation 'org.springframework.security:spring-security-test'
		testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	}

	tasks.withType(KotlinCompile).configureEach {
		kotlinOptions {
			freeCompilerArgs += '-Xjsr305=strict'
			jvmTarget = '21'
		}
	}

	jacoco {
		toolVersion = '0.8.12'
	}

	jacocoTestReport {
		reports {
			html.required = true
			csv.required = true
			xml.required = true
		}

		def excludePattern = []
		("QA".."QZ").each { qPattern ->
			excludePattern.add("**/*$qPattern*")
		}

		afterEvaluate {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(
						dir: it,
						excludes: [] + excludePattern
				)
			}))
		}

		finalizedBy 'jacocoTestCoverageVerification'
	}

	jacocoTestCoverageVerification {
		def excludePattern = []
		("QA".."QZ").each { qPattern ->
			excludePattern.add("**/*\$qPattern*")
		}

		violationRules {

			rule {
				enabled = true
				element = 'BUNDLE'

				limit {
					counter = 'INSTRUCTION'
					value = 'COVEREDRATIO'
					minimum = 0.1
				}
				excludes = [] + excludePattern
			}
		}
	}
}

project(":core") {
	bootJar.enabled = false
	jar.enabled = true
}

project(":client-api") {
	dependencies {
		implementation(project(":core"))
	}
}

project(":admin-api") {
	dependencies {
		implementation(project(":core"))
	}
}